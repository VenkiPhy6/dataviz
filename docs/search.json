[
  {
    "objectID": "assign1.html",
    "href": "assign1.html",
    "title": "Assignment 1",
    "section": "",
    "text": "This is Assignment 1."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Venkiâ€™s website for Data Viz (EPPS 6356) class",
    "section": "",
    "text": "My assignments are under the Assignments tab.\nThanks for visiting!"
  },
  {
    "objectID": "assignments.html",
    "href": "assignments.html",
    "title": "Assignments",
    "section": "",
    "text": "Assignment 1\nAssignment 3"
  },
  {
    "objectID": "assign3.html",
    "href": "assign3.html",
    "title": "Assignment 3",
    "section": "",
    "text": "I had to replicate the following scatterplot with my own code.\n\nThe following code was provided to get the dataset.\n\n## Download COVID data from OWID GitHub\n# owidall = read.csv(\"https://github.com/owid/covid-19-data/blob/master/public/data/owid-covid-data.csv?raw=true\")\n# Save it to save time when rendering\n# saveRDS(owidall, \"./data/owidall_assign3.rds\")\nowidall = readRDS(\"./data/owidall_assign3.rds\")\n# Deselect cases/rows with OWID\nowidall = owidall[!grepl(\"^OWID\", owidall$iso_code), ]\n# Subset by continent: Europe\nowideu = subset(owidall, continent==\"Europe\")\n\nNow I write code in hopes of replicating the plot.\n\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(lubridate)\n\n\nowideu &lt;- owideu |&gt; \n  mutate(date = as.Date(date, format = \"%Y-%m-%d\"),\n         date_mon = floor_date(date, \"month\")) |&gt; \n  filter(!(location %in% c(\"United Kingdom\", \"Russia\")))\n\nwave1_st &lt;- as.Date(\"2020-02-01\")\nwave2_st &lt;- as.Date(\"2020-11-01\")\nwave3_st &lt;- as.Date(\"2021-08-01\")\nwave4_st &lt;- as.Date(\"2021-08-01\")\nwave5_st &lt;- as.Date(\"2022-07-01\")\nwave6_st &lt;- as.Date(\"2023-04-01\")\n\nwave1 &lt;- seq(wave1_st, wave1_st %m+% months(9), by = \"2 months\")\nwave2 &lt;- seq(wave2_st, wave2_st %m+% months(9), by = \"2 months\")\nwave3 &lt;- seq(wave3_st, wave3_st %m+% months(11), by = \"2 months\")\nwave4 &lt;- seq(wave4_st, wave4_st %m+% months(9), by = \"2 months\")\nwave5 &lt;- seq(wave5_st, wave5_st %m+% months(9), by = \"2 months\")\nwave6 &lt;- seq(wave6_st, wave6_st %m+% months(5), by = \"2 months\")\nwave6_fin &lt;- seq(wave6_st, wave6_st %m+% months(7), by = \"2 months\")\n\ndate_labels &lt;- c(as.Date(\"2020-01-01\"), \n                 wave1, wave2, wave3, wave4, wave5, wave6\n                 )\n\nowideu &lt;- owideu |&gt; \n  mutate(waves = case_when(\n    date_mon %in% wave1 ~ 'wave1',\n    date_mon %in% wave2 ~ 'wave2',\n    date_mon %in% wave3 ~ 'wave3',\n    date_mon %in% wave4 ~ 'wave4',\n    date_mon %in% wave5 ~ 'wave5',\n    date_mon %in% wave6_fin ~ 'wave6',\n  ))\n\ntext_labels &lt;- owideu |&gt; \n  filter(!is.na(waves)) |&gt; \n  group_by(waves) |&gt;\n  summarise(max_deaths=max(new_deaths, na.rm=T), .groups='drop')  |&gt;\n  left_join(owideu |&gt; select(location, date, new_deaths, waves), \n            join_by(waves, max_deaths==new_deaths)) |&gt; \n  select(x=date, y=max_deaths, label=location)\n\nowideu |&gt; \n  filter(date &gt;= '2020-01-01' & date &lt;= '2023-10-31') |&gt;\n  filter(location != c(\"United Kingdom\")) |&gt;\n  # group_by(date_mon, iso_code) |&gt; \n  # summarise(total_deaths=sum(new_deaths_smoothed, na.rm=T), .groups = 'drop') |&gt; \n  # filter(!is.na(new_deaths)) |&gt; \n  ggplot(aes(x=date, y=new_deaths)) +\n    geom_point(color=\"#E72A8A\", cex=0.5) +\n    ggrepel::geom_text_repel(data = text_labels, \n              aes(x=x, y=y), label=text_labels |&gt; select(label) |&gt; pull()) +\n    labs(x = \"Date\", y = \"COVID Deaths in Europe (Daily)\") +\n    theme_minimal() +\n    scale_x_date(\n      # limits = c(as.Date('2020-02-01', format=\"%Y-%m-%d\"), as.Date('2023-10-01', format=\"%Y-%m-%d\")),\n      breaks = date_labels, \n      # labels = ,\n      date_labels =  \"%Y-%m\"\n      # expand = expansion(add = c(30, 0)) #c(0,0)\n      ) +\n    scale_y_continuous(breaks = c(0, 1000, seq(3000, 10000, 2000))) +\n    theme(axis.text.x=element_text(angle=90, hjust=-3, vjust = 0.5), \n          axis.text.y = element_text(size = 11, angle=90, vjust=3, hjust = 0.5), \n          axis.title.y = element_text(vjust = 7),\n          panel.grid = element_blank(), \n          panel.border = element_rect(colour = \"black\", fill=NA),\n          plot.margin = margin(t = 10, r = 10, b = 10, l = 30),\n          axis.ticks.y = element_line(color = \"black\", linewidth = 0.3),\n          axis.ticks.length.y = unit(8, \"pt\"))\n\n\n\n\n\n\n\n\nThis is as close as I could get. There are a few aspects I have missed."
  },
  {
    "objectID": "assign3.html#pre-hackathon-by-team",
    "href": "assign3.html#pre-hackathon-by-team",
    "title": "Assignment 3",
    "section": "",
    "text": "I had to replicate the following scatterplot with my own code.\n\nThe following code was provided to get the dataset.\n\n## Download COVID data from OWID GitHub\n# owidall = read.csv(\"https://github.com/owid/covid-19-data/blob/master/public/data/owid-covid-data.csv?raw=true\")\n# Save it to save time when rendering\n# saveRDS(owidall, \"./data/owidall_assign3.rds\")\nowidall = readRDS(\"./data/owidall_assign3.rds\")\n# Deselect cases/rows with OWID\nowidall = owidall[!grepl(\"^OWID\", owidall$iso_code), ]\n# Subset by continent: Europe\nowideu = subset(owidall, continent==\"Europe\")\n\nNow I write code in hopes of replicating the plot.\n\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(lubridate)\n\n\nowideu &lt;- owideu |&gt; \n  mutate(date = as.Date(date, format = \"%Y-%m-%d\"),\n         date_mon = floor_date(date, \"month\")) |&gt; \n  filter(!(location %in% c(\"United Kingdom\", \"Russia\")))\n\nwave1_st &lt;- as.Date(\"2020-02-01\")\nwave2_st &lt;- as.Date(\"2020-11-01\")\nwave3_st &lt;- as.Date(\"2021-08-01\")\nwave4_st &lt;- as.Date(\"2021-08-01\")\nwave5_st &lt;- as.Date(\"2022-07-01\")\nwave6_st &lt;- as.Date(\"2023-04-01\")\n\nwave1 &lt;- seq(wave1_st, wave1_st %m+% months(9), by = \"2 months\")\nwave2 &lt;- seq(wave2_st, wave2_st %m+% months(9), by = \"2 months\")\nwave3 &lt;- seq(wave3_st, wave3_st %m+% months(11), by = \"2 months\")\nwave4 &lt;- seq(wave4_st, wave4_st %m+% months(9), by = \"2 months\")\nwave5 &lt;- seq(wave5_st, wave5_st %m+% months(9), by = \"2 months\")\nwave6 &lt;- seq(wave6_st, wave6_st %m+% months(5), by = \"2 months\")\nwave6_fin &lt;- seq(wave6_st, wave6_st %m+% months(7), by = \"2 months\")\n\ndate_labels &lt;- c(as.Date(\"2020-01-01\"), \n                 wave1, wave2, wave3, wave4, wave5, wave6\n                 )\n\nowideu &lt;- owideu |&gt; \n  mutate(waves = case_when(\n    date_mon %in% wave1 ~ 'wave1',\n    date_mon %in% wave2 ~ 'wave2',\n    date_mon %in% wave3 ~ 'wave3',\n    date_mon %in% wave4 ~ 'wave4',\n    date_mon %in% wave5 ~ 'wave5',\n    date_mon %in% wave6_fin ~ 'wave6',\n  ))\n\ntext_labels &lt;- owideu |&gt; \n  filter(!is.na(waves)) |&gt; \n  group_by(waves) |&gt;\n  summarise(max_deaths=max(new_deaths, na.rm=T), .groups='drop')  |&gt;\n  left_join(owideu |&gt; select(location, date, new_deaths, waves), \n            join_by(waves, max_deaths==new_deaths)) |&gt; \n  select(x=date, y=max_deaths, label=location)\n\nowideu |&gt; \n  filter(date &gt;= '2020-01-01' & date &lt;= '2023-10-31') |&gt;\n  filter(location != c(\"United Kingdom\")) |&gt;\n  # group_by(date_mon, iso_code) |&gt; \n  # summarise(total_deaths=sum(new_deaths_smoothed, na.rm=T), .groups = 'drop') |&gt; \n  # filter(!is.na(new_deaths)) |&gt; \n  ggplot(aes(x=date, y=new_deaths)) +\n    geom_point(color=\"#E72A8A\", cex=0.5) +\n    ggrepel::geom_text_repel(data = text_labels, \n              aes(x=x, y=y), label=text_labels |&gt; select(label) |&gt; pull()) +\n    labs(x = \"Date\", y = \"COVID Deaths in Europe (Daily)\") +\n    theme_minimal() +\n    scale_x_date(\n      # limits = c(as.Date('2020-02-01', format=\"%Y-%m-%d\"), as.Date('2023-10-01', format=\"%Y-%m-%d\")),\n      breaks = date_labels, \n      # labels = ,\n      date_labels =  \"%Y-%m\"\n      # expand = expansion(add = c(30, 0)) #c(0,0)\n      ) +\n    scale_y_continuous(breaks = c(0, 1000, seq(3000, 10000, 2000))) +\n    theme(axis.text.x=element_text(angle=90, hjust=-3, vjust = 0.5), \n          axis.text.y = element_text(size = 11, angle=90, vjust=3, hjust = 0.5), \n          axis.title.y = element_text(vjust = 7),\n          panel.grid = element_blank(), \n          panel.border = element_rect(colour = \"black\", fill=NA),\n          plot.margin = margin(t = 10, r = 10, b = 10, l = 30),\n          axis.ticks.y = element_line(color = \"black\", linewidth = 0.3),\n          axis.ticks.length.y = unit(8, \"pt\"))\n\n\n\n\n\n\n\n\nThis is as close as I could get. There are a few aspects I have missed."
  }
]